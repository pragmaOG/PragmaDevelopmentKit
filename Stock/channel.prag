


page channel in stock@pragma


token channel_report ( 'good', 'pending', 'busy', 'closed', 'retry', 'end', 'error', 'other' );
{{
	good: all data was transferred as requested; deficit = 0.

	pending:  async request was queued; deficit = size.

	busy: channel is busy, sync request timed out; deficit > 0.  
		
	closed:  deficit = size.

	retry:	The requested amount was not transferred, but retry
	is possible; deficit > 0.
		
	end:  A fixed limit was reached and retry is not possible; 
	deficit > 0.

	error:  deficit > 0.

	other:  unrecognized report from channel
}}
	


subroutine attach_async_message ( addr preq, message m [var] )( int id, channel_report report, text note ) -- final preq
{
	restore_request( preq )( =request ):get_group1()( ascii action, id, addr pdata, int offset, int size ):get_group2()( int deficit, report, note );
	attach( *m, pdata, offset, size, deficit, action );
}

 

type channel [incomplete]  
{{
	A channel is an object for communicating with external
	processes and devices using messages.

	A channel handle is given at :begin time and respons-
	ibility for the handle is assumed by the channel.  The 
	application should not close the handle after calling 
	:begin in any case.

	:close closes the channel normally. An application can
	give it's own closing note. "normal close" is the 
	default. If the channel is already closed, the original 
	closing note is	copied to an output.

	A channel is automatically closed in response to any
	error. In subj case, the closing note is copied from
	the i/o request record, if any.  If not provided, the
	closing note is "unspecified channel error."
	
	Once closed, a channel will no longer operate.
		
	Close synchronization is not perfect. In theory, mult-
	iple i/o requests can be initiated and/or completed as
	a channel is closing.  
		
	All i/o requests are guaranteed to complete	if a channel
	is properly closed.  However, it's undefined whether a 
	particular i/o request completes successfully or not
	while the channel is closing.
		
	There can be a race to close a channel.  The winner
	determines the closing note and calls the underlying
	kernel close routine.

	:check checks the channel status.  If it's closed, the
	closing note is copied to an output.  Otherwise if it's
	open, the output will be null.

	The open status flag and closing note are protected by
	an atomic lock.  Once the open status flag is false, 
	the instance is static.
}}
{
	general method
	{
		begin ( handle hch )
		{
			subj.hch:begin( hch );	
			subj.lock:begin( false );
			subj.open:begin( true );
		}
		
		close ( text note [opt] )( text other )
		{
			fix( note, 'normal close' );
			subj:internal_close( note )( other );
		}

		check ()( text note ) 
		{
			subj.lock:wait_false;
			if ( "not( subj.open )" ) note:begin( subj.note );
			subj.lock:set_false;
		}
	}

	
	base method
	{
		exec_sync_io ( etm wait [opt ], ascii action, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:check()( note );
			if ( "null?( note )" ) -- if not closed
			{
				fix( wait, max_int );  -- default = no limit
				format_request( request:begin( action, seek, null, pdata, offset, size ) )( addr pr );
				kernel\channel_sync_io( subj.hch, pr, wait:as_int );
				subj:finish( pr )( deficit, report, note );
			}
			else
			{
				deficit:begin( size );
				report:begin( 'closed' );
			}
		}

		exec_async_io ( int id, handle hq, ascii action, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:check()( note );
			if ( "null?( note )" ) -- if not closed
			{
				format_request( request:begin( action, seek, id, pdata, offset, size ) )( addr pr );
				kernel\channel_async_io( subj.hch, pr, hq );
				subj:finish( pr )( deficit, report, note );
			}
			else
			{
				deficit:begin( size );
				report:begin( 'closed' );
			}
		}
										
		internal_close ( text note )( text other )
		{
			subj.lock:wait_false;
			if ( subj.open )
			{
				subj.open:not;
				subj.note:begin( note );
				subj.lock:set_false;
				kernel\channel_close( subj.hch ); 
			}
			else
			{
				subj.lock:set_false;
				other:begin( subj.note );
			}
		}
	}

	misc method
	{
		end
		{
			if ( subj.open ) kernel\channel_close( subj.hch ); 
		}

		finish ( addr pr )( int deficit, channel_report report, text note )
		{
			restore_request( pr )( =request ):get_group2()( deficit, report, note );
			if ( "report |=| 'error' " )
			{
				fix( note, 'unspecified channel error' );
				subj:internal_close( note )( text other );
				if ( "not_null?( other )" ) fix( note:reuse, other );
			}
		}
	}
	
	instance	
	{
		handle		hch;
		rxb			lock;
		bool		open;
		text		note [opt];	-- when closed
	}
}


type sync_channel_reader [incomplete]
{{
	A sync_channel_reader is an adaptable channel reader.
	Messages are transferred synchronously.
	
	:read transfers data from the channel to a given message
	via :_read.

	Data is placed at the current message wp. Request size
	is calculated from message size and wp.
	
	Message wp is updated to reflect the amount of data
	actually transferred.  The application can compare wp
	to message size to calculate a deficit.

	Output report is always well-defined.  If there is no
	deficit, it will be 'good'.  Otherwise, report explains 
	why	there is a deficit.  Output note is channel dependent
	and	may or may not be well defined for any report.
	
	:read can be called in a loop until	message:wp_end? 
	returns true, provided report doesn't imply subj another
	read is pointless.
}}
{

	general method
	{
		begin ( etm wait [opt] )
		{
			fix( subj.wait, wait );
		}
	
		read ( message m [var], int seek [opt], etm wait [opt] )( channel_report report, text note ) 
		{
			fix( wait, that_wait );
			m:get_wp()( int offset ):get_size()( =int rsize ):sub( offset );
			if ( "rsize |>| zero" )
			{
				m:detach()( addr pdata, int );
				subj:~read( wait, seek, pdata, offset, rsize )( int deficit, report, note ); 
				attach( *m, pdata, offset, rsize, deficit, 'r' );
			}
			else
				report:begin( 'good' ); -- nothing to do
		}
	}

	abstract method
	{
		~read ( etm wait [opt], int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note );
	}
	
	instance
	{
		etm wait [opt];
	}
}


type sync_channel_writer [incomplete]
{{
	A sync_channel_writer is an adaptable channel writer.
	Messages are transferred synchronously.
	
	:write transfers data from a given message to the channel
	via :_write.

	Data is copied from the current message rp. Request size
	is calculated from message size and rp.
	
	Message wp is updated to reflect the amount of data
	actually transferred.  The application can compare wp
	to message size to calculate a deficit.

	Output report is always well-defined.  If there is no
	deficit, it will be 'good'.  Otherwise, report 
	explains why there is a deficit.  Output note is channel
	dependent and may or may not be well defined for any
	report.
	
	:write can be called in a loop until message:rp_end? 
	returns true, provided report doesn't imply subj another
	write is pointless.
}}
{
	general method
	{
		begin ( etm wait [opt] )
		{
			fix( subj.wait, wait );
		}
	
		write ( message m [var], int seek [opt], etm wait [opt] )( channel_report report, text note ) 
		{
			fix( wait, subj.wait );
			m:get_rp()( int offset ):get_size()( =int rsize ):sub( offset );
			if ( "rsize |>| zero" )
			{
				m:detach()( addr pdata, int );
				subj:~write( wait, seek, pdata, offset, rsize )( int deficit, report, note ); 
				attach( *m, pdata, offset, rsize, deficit, 'w' );
			}
			else 
				report:begin( 'good' ); -- nothing to do

		}
	}

	abstract method
	{
		~write ( etm wait [opt], int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note );
	}
	

	instance
	{
		etm wait [opt];
	}
}



type async_channel_reader [incomplete]
{
	general method
	{
		begin
		{
		}
	
		read ( int id, handle hq, message m [var], int seek [opt] )( channel_report report, text note ) 
		{
			m:get_wp()( int offset ):get_size()( =int rsize ):sub( offset );
			if (" rsize |>| zero ")
			{
				m:detach()( addr pdata, int );
				subj:~read( id, hq, seek, pdata, offset, rsize )( int deficit, report, note ); 
				if ( "( deficit |not=| rsize ) |or| ( report |not=| 'pending' )" ) attach( *m, pdata, offset, rsize, deficit, 'r' );
			}
			else
				report:begin( 'good' ); -- nothing to do
		}

	}

	abstract method
	{
		~read ( int id, handle hq, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note );
	}
}


type async_channel_writer [incomplete]
{
	general method
	{
		begin
		{
		}
	
		write ( int id, handle hq, message m [var], int seek [opt] )( channel_report report, text note ) 
		{
			m:get_rp()( int offset ):get_size()( =int rsize ):sub( offset );
			if ( "rsize |>| zero" )
			{
				m:detach()( addr pdata, int );
				subj:~write( id, hq, seek, pdata, offset, rsize )( int deficit, report, note ); 
				if (" ( deficit |not=| rsize ) |or| ( report |not=| 'pending' ) ") attach( *m, pdata, offset, rsize, deficit, 'w' );
			}
			else
				report:begin( 'good' ); -- nothing to do
		}

	}

	abstract method
	{
		~write ( int id, handle hq, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note );
	}
	
}




type sync_read_only_channel from ( channel, sync_channel_reader )
{
	general
	{
		begin ( handle hch, etm wait [opt] )
		{
			subj:as<channel>:begin( hch );
			subj:as<sync_channel_reader>:begin( wait );
		}
	}

	abstract in sync_channel_reader
	{
		[final] ~read ( etm wait [opt], int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_sync_io( wait, 'r', seek, pdata, offset, size )( deficit, report, note );
		}
	}
}



type sync_write_only_channel from ( channel, sync_channel_writer )
{
	general
	{
		begin ( handle hch, etm wait [opt] )
		{
			subj:as<channel>:begin( hch );
			subj:as<sync_channel_writer>:begin( wait );
		}
	}

	abstract in sync_channel_writer
	{
		[final] ~write ( etm wait [opt], int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_sync_io( wait, 'w', seek, pdata, offset, size )( deficit, report, note );
		}
	}
}


type sync_read_write_channel from ( channel, sync_channel_reader, sync_channel_writer )
{
	general
	{
		begin ( handle hch, etm wait [opt] )
		{
			subj:as<channel>:begin( hch );
			subj:as<sync_channel_reader>:begin( wait );
			subj:as<sync_channel_writer>:begin( wait );
		}
	}

	abstract in sync_channel_reader
	{
		[final] ~read ( etm wait [opt], int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_sync_io( wait, 'r', seek, pdata, offset, size )( deficit, report, note );
		}
	}

	abstract in sync_channel_writer
	{
		[final] ~write ( etm wait [opt], int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_sync_io( wait, 'w', seek, pdata, offset, size )( deficit, report, note );
		}
	}
}



type async_read_only_channel from ( channel, async_channel_reader )
{
	general
	{
		begin ( handle hch )
		{
			subj:as<channel>:begin( hch );
			subj:as<async_channel_reader>:begin;
		}
	}

	abstract in async_channel_reader
	{
		[final] ~read ( int id, handle hq, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_async_io( id, hq, 'r', seek, pdata, offset, size )( deficit, report, note );
		}
		
	}
}


type async_write_only_channel from ( channel, async_channel_writer )
{
	general
	{
		begin ( handle hch )
		{
			subj:as<channel>:begin( hch );
			subj:as<async_channel_writer>:begin;
		}
	}

	abstract in async_channel_writer
	{
		[final] ~write ( int id, handle hq, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_async_io( id, hq, 'w', seek, pdata, offset, size )( deficit, report, note );
		}
	}
}



type async_read_write_channel from ( channel, async_channel_reader, async_channel_writer )
{
	general
	{
		begin ( handle hch )
		{
			subj:as<channel>:begin( hch );
			subj:as<async_channel_reader>:begin;
			subj:as<async_channel_writer>:begin;
		}
	}

	abstract in async_channel_reader
	{
		[final] ~read ( int id, handle hq, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_async_io( id, hq, 'r', seek, pdata, offset, size )( deficit, report, note );
		}
		
	}

	abstract in async_channel_writer
	{
		[final] ~write ( int id, handle hq, int seek [opt], addr pdata, int offset, int size )( int deficit, channel_report report, text note )
		{
			subj:as<channel>:exec_async_io( id, hq, 'w', seek, pdata, offset, size )( deficit, report, note );
		}
	}
}



local type request
{{
	This is an i/o request data structure.  

	There is no ownership of heap addresses.  
	
	:get_group2 should only be called once because output text
	takes ownership of memory allocated by channel.
}}
{
	general 
	{
		begin	
		{
			subj.action:begin;
			subj.seek:begin;
			subj.id:begin;
			subj.pdata:begin;
			subj.offset:begin;
			subj.size:begin;
			subj:begin_channel_side;
		}


		begin ( ascii action, int seek [opt], int id [opt], addr pdata, int offset, int size )
		{
			if ( "( action |not=| 'r' ) |and| ( action |not=| 'w' )" ) quit ( 'bug', 'invalid i/o action' );
			subj.action:begin( "ascii_as_word( action )" );
			subj.seek:begin( fix( seek, zero ) );
			subj.id:begin( fix( id, zero ) );
			subj.pdata:begin( pdata );
			subj.offset:begin( offset );
			subj.size:begin( size );
			subj:begin_channel_side;
		}

		begin ( message [var], expr fex );			-- per image

		write ( message [var], expr fex ) [const];	-- per image

		get_group1 ()( ascii action, int id, addr pdata, int offset, int size ) [const]
		{
			action:begin( "word_as_ascii( subj.action )" );
			id:begin( subj.id );
			pdata:begin( subj.pdata );
			offset:begin( subj.offset );
			size:begin( subj.size );
		}


		get_group2 ()( int deficit, channel_report cr, text note ) [var] -- invalidates pnote
		{
			deficit:begin( subj.deficit );
			select ( "word_as_ascii( subj.report )" )
			{
				case ( 'NUL' )	cr:begin( 'good' );
				case ( 'p' )	cr:begin( 'pending' );
				case ( 'b' )	cr:begin( 'busy' );
				case ( 'c' )	cr:begin( 'closed' );
				case ( 'r' )	cr:begin( 'retry' );
				case ( 'e' )	cr:begin( 'end' );
				case ( 'x' )	cr:begin( 'error' );
				else			cr:begin( 'other' );
			}
			if ( "subj.pnote |not=| no_addr" )
			{
				note:begin:attach( subj.pnote ):trim_zero;
				subj.pnote:reuse:begin;  -- prevent another attachment
			}
		}

	}

	misc
	{	
		begin_channel_side
		{
			subj.deficit:begin;
			subj.report:begin;
			subj.pnote:begin;
		}
	}


	subroutine
	{
		word_as_ascii ( word8 )( ascii )
		{
			@ascii:begin( int:begin( @word8, 'b:ascii' ) );
		}

		ascii_as_word ( ascii )( word8 )
		{
			@ascii:as_int:fwrite( 'b:ascii' )( @word8 );
		}
	}
	

	instance
	{
		word8	action;		-- ascii r, w
		addr	pdata;		-- data addr
		int		offset;		-- placement, bytes
		int		size;		-- transfer size, bytes 
		int		id;			-- for async 
		int		seek;		-- external origin
		int		deficit;	-- size	deficit, bytes
		word8	report;		-- ascii NUL, p, b, t, c, x
		addr	pnote;		-- zero terminated text
	}


	image 'b' [native] 
	{
		action	( 'b' );
		pdata	( 'b' );
		offset	( 'b' );
		size	( 'b' );
		id		( 'b' );
		seek	( 'b' );
		deficit	( 'b' );
		report	( 'b' );
		pnote	( 'b' );
	}
}


local durable 
{
	int sizeof_request [const];

	begin
	{
		message:begin:fwrite<request>( request:begin, 'b' ):get_size()( sizeof_request );
	}
}


local subroutine
{
	format_request ( request r )( addr pr )  -- orphan pr
	{
		message:begin:fwrite<request>( r, 'b' ):detach()( addr pr, int ); 
	}

	restore_request ( addr pr )( request r )  -- final pr 
	{
		message:begin:attach( pr, sizeof_request ):fread<request>( 'b' )( r );
	}

	attach ( message m [var], addr pdata, int offset, int size, int deficit, ascii action ) 
	{
		int msize:begin( "offset + size" );
		m:attach( pdata, msize );
		int cp:begin( msize ):sub( deficit );
		if ( "action |=| 'w'" ) m:set_rp( cp ) else m:set_wp( cp );   
	}
}


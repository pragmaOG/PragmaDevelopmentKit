
page indicator in alpha@pragma


type indicator [incomplete]  -- restricted
{{
	An indicator is thread wait synchronizer.
		
	An indicator is internally abstract and restricted. 
	The only allowed derivations are alpha\signal, 
	alpha\counter, and alpha\timer.

	An indicator is used to coordinate cooperating threads.
	Using a shared indicator, one thread can wait with a 
	time limit (yield) until another thread releases it.

	Note: This is two-sided thread coordination. One side
	yields/waits while the other side releases. Multiple
	threads can share an indicator on both sides. Compare
	to one-sided lock coordination. See alpha\lock.
		
	The indicator release condition is determined by the 
	actual indicator. See subtype definitions for details.

	:wait returns when the indicator is in a release state.
	The calling thread may yield if the indicator is not
	already in a release state when the method is called.

	Untimed :wait returns only when the indicator releases
	it. 

	Note:  Use untimed :wait with care as it can cause a
	thread to yield indefinitely.
		
	Timed :wait always returns when a given or intrinsic 
	time elapses, whether the indicator releases it or not.
	A bool output indicates 'true' if the method returns 
	because it was released.  Otherwise, if time expires, 
	the output is 'false'. If given time is null, an
	intrinsic :wait time specified by the actual indicator
	is used. See subtype definitions for details.

	:test evaluates the indicator's release state and
	returns immediately.  It doesn't yield.  A bool output 
	indicates 'true' if the indicator is in a release state, 
	otherwise it indicates 'false'.

	:wait and :test may or may not reset the release
	condition, depending on the indicator's execution mode.
	See subtype definitions for details.

	:handle returns the indicator's internal system resource
	handle for transfer to kernel subroutines.
}}
{
	general
	{
		wait [const];							-- untimed yield

		wait ( etm [opt] )( bool ) [const];		-- timed yield

		test ()( bool ) [const];				-- no yield

		handle [const] = handle proxy [const];
	}
}

